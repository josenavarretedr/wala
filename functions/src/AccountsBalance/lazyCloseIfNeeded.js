/* eslint-disable */

/**
 * @file lazyCloseIfNeeded.js
 * @description Funci√≥n callable que cierra autom√°ticamente el d√≠a anterior si qued√≥ abierto.
 * Se ejecuta al momento de hacer una apertura nueva (lazy-open).
 * 
 * Infraestructura consistente con:
 * - useTransaction.js (manejo de transacciones)
 * - useCashClosure.js (l√≥gica de cierre)
 * - transactionStore.js (estructura de transacciones)
 * 
 * @module AccountsBalance/lazyCloseIfNeeded
 */

// Firebase Functions v1
const functions = require('firebase-functions');
const admin = require('firebase-admin');
const { v4: uuidv4 } = require('uuid');

// Inicializar Firebase Admin si no est√° inicializado
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

const { yesterdayStr } = require('../Helpers/time');
const { getDayAggregates, upsertDailySummary } = require('./sharedComputed');
const { breakStreak } = require('./sharedStreak');

const DEFAULT_TZ = 'America/Lima';

/**
 * Cierra autom√°ticamente el d√≠a anterior si qued√≥ abierto sin cierre manual.
 * Esto permite mantener la integridad de los datos cuando el usuario olvida cerrar.
 * 
 * Flujo (similar a useCashClosure.createClosure):
 * 1. Verifica autenticaci√≥n y businessId
 * 2. Calcula el d√≠a anterior seg√∫n timezone
 * 3. Verifica si tiene apertura pero no cierre
 * 4. Crea transacci√≥n de cierre autom√°tico con UUID
 * 5. Actualiza dailySummary
 * 6. Rompe la racha de d√≠as consecutivos
 * 
 * @param {Object} data - { businessId: string }
 * @param {Object} context - Firebase auth context
 * @returns {Object} { closed: boolean, mode?: string, day?: string, reason?: string }
 */
module.exports = functions.https.onCall(async (data, context) => {
  // === VALIDACI√ìN DE AUTENTICACI√ìN ===
  if (!context.auth || !context.auth.uid) {
    throw new functions.https.HttpsError('unauthenticated', 'Autenticaci√≥n requerida');
  }

  // === VALIDACI√ìN DE PAR√ÅMETROS ===
  const businessId = data && data.businessId;
  if (!businessId) {
    throw new functions.https.HttpsError('invalid-argument', 'businessId es requerido');
  }

  console.log(`üîç Lazy close check for business: ${businessId}`);

  // === OBTENER TIMEZONE DEL NEGOCIO ===
  const businessDoc = await db.doc(`businesses/${businessId}`).get();

  if (!businessDoc.exists) {
    throw new functions.https.HttpsError('not-found', `Negocio ${businessId} no encontrado`);
  }

  const businessData = businessDoc.data();
  const tz = (businessData && businessData.timezone) || DEFAULT_TZ;

  // === CALCULAR D√çA ANTERIOR ===
  const day = yesterdayStr(tz);
  console.log(`üìÖ Checking day: ${day} (tz: ${tz})`);

  // === OBTENER AGREGADOS DEL D√çA ===
  const agg = await getDayAggregates(db, businessId, day, tz);

  console.log(`üìä Day status:`, {
    hasOpening: agg.hasOpening,
    hasClosure: agg.hasClosure,
    hasTxn: agg.hasTxn
  });

  // === VERIFICAR SI NECESITA CIERRE AUTOM√ÅTICO ===
  if (agg.hasOpening && !agg.hasClosure) {
    console.log(`üîí Creating automatic closure for ${day}`);

    // Generar UUID para la transacci√≥n (consistente con useTransaction)
    const closureUuid = uuidv4();
    const closureRef = db.collection(`businesses/${businessId}/transactions`).doc(closureUuid);

    // Estructura de transacci√≥n consistente con transactionStore
    const closureTransaction = {
      uuid: closureUuid,
      type: 'closure',
      description: 'Cierre autom√°tico (lazy-open)',
      source: 'copilot',
      copilotMode: 'lazyOpen',
      account: 'cash', // Default cash account
      amount: 0,
      // Campos adicionales para trazabilidad
      metadata: {
        previousDay: day,
        triggerType: 'lazy_open',
        autoGenerated: true
      },
      createdAt: admin.firestore.FieldValue.serverTimestamp()
    };

    // Crear transacci√≥n de cierre
    await closureRef.set(closureTransaction);
    console.log(`‚úÖ Closure transaction created: ${closureUuid}`);

    // Actualizar resumen diario con estructura completa + flags de cierre autom√°tico
    await upsertDailySummary(db, businessId, day, {
      ...agg, // Toda la estructura completa de accountsBalanceStore
      hasClosure: true,
      isAutoClosed: true,
      closureId: closureUuid,
      autoCloseReason: 'lazyOpen',
      completedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    console.log(`‚úÖ Daily summary updated with complete financial data`);

    // Romper racha de d√≠as consecutivos
    await breakStreak(db, businessId);
    console.log(`üìâ Streak broken due to automatic closure`);

    return {
      closed: true,
      mode: 'lazyOpen',
      day,
      closureId: closureUuid
    };
  }

  // No necesita cierre autom√°tico
  console.log(`‚ÑπÔ∏è  No automatic closure needed`);
  return {
    closed: false,
    reason: 'no_missing_closure',
    day
  };
});
